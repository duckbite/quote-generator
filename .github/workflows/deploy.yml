name: Deploy API (prod)

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  OPENAI_SECRET_ARN: arn:aws:secretsmanager:us-east-1:052306545299:secret:prod/quote-generator/openai-key-MVrI4K
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS credentials via OIDC (if role provided)
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}

      - name: Configure AWS credentials via access keys (fallback)
        if: ${{ env.AWS_ROLE_TO_ASSUME == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Install Serverless CLI
        run: |
          npm ci --ignore-scripts --no-audit --no-fund
          npx serverless --version

      - name: Vendor Python deps into src
        working-directory: services/api-py
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt --target src

      - name: Fetch OpenAI API key from Secrets Manager
        id: fetch_secret
        env:
          OPENAI_SECRET_ARN: ${{ env.OPENAI_SECRET_ARN }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          set -euo pipefail
          SECRET=$(aws secretsmanager get-secret-value --secret-id "$OPENAI_SECRET_ARN" --region "$AWS_REGION" --query SecretString --output text || echo "")
          if [ -z "$SECRET" ]; then
            echo "::warning::Secret empty or not found; ensure IAM allows secretsmanager:GetSecretValue"
          fi
          if echo "$SECRET" | grep -q '^{'; then
            KEY=$(echo "$SECRET" | jq -r '.OPENAI_API_KEY // .openai_api_key // .key // empty')
          else
            KEY="$SECRET"
          fi
          echo "OPENAI_API_KEY=$KEY" >> "$GITHUB_ENV"

      - name: Serverless package
        working-directory: services/api-py
        run: npx --yes serverless package --stage prod --region $AWS_REGION

      - name: cfn-lint generated template
        working-directory: services/api-py
        run: |
          python -m pip install --quiet cfn-lint
          TEMPLATE=$(ls .serverless/*template* | head -n1)
          cfn-lint --format pretty "$TEMPLATE"

      - name: Serverless deploy
        env:
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        working-directory: services/api-py
        run: npx --yes serverless deploy --stage prod --region $AWS_REGION
